version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: college-management-postgres
    environment:
      POSTGRES_DB: college_management_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/postgres-init:/docker-entrypoint-initdb.d
    networks:
      - college-management-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  postgres-test:
    image: postgres:16-alpine
    container_name: college-management-postgres-test
    environment:
      POSTGRES_DB: college_management_test
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "5433:5432"
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
    networks:
      - college-management-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Optional: Database administration tool
  pgadmin:
    image: dpage/pgadmin4:8
    container_name: college-management-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@college-management.local
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./scripts/postgres-servers.json:/pgadmin4/servers.json:ro
    networks:
      - college-management-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  postgres_test_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  college-management-network:
    driver: bridge

# Development commands:
# Start services: docker-compose up -d
# Stop services: docker-compose down
# Restart database: docker-compose restart postgres
# View logs: docker-compose logs postgres
# Clean volumes: docker-compose down -v