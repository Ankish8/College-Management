generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model University {
  id          String       @id @default(cuid())
  name        String
  shortName   String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  departments Department[]

  @@map("universities")
}

model Department {
  id                    String                 @id @default(cuid())
  name                  String
  shortName             String
  universityId          String
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  academicCalendars     AcademicCalendar[]
  settings              DepartmentSettings?
  university            University             @relation(fields: [universityId], references: [id], onDelete: Cascade)
  holidays              Holiday[]
  programs              Program[]
  timetableTemplatesNew TimetableTemplateNew[]
  users                 User[]

  @@map("departments")
}

model Program {
  id              String           @id @default(cuid())
  name            String
  shortName       String
  duration        Int
  totalSems       Int
  programType     String           @default("UNDERGRADUATE")
  departmentId    String
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  batches         Batch[]
  department      Department       @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  specializations Specialization[]

  @@map("programs")
}

model Specialization {
  id        String   @id @default(cuid())
  name      String
  shortName String
  programId String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  batches   Batch[]
  program   Program  @relation(fields: [programId], references: [id], onDelete: Cascade)

  @@unique([programId, shortName])
  @@map("specializations")
}

model Batch {
  id                 String              @id @default(cuid())
  name               String
  programId          String
  specializationId   String?
  semester           Int
  startYear          Int
  endYear            Int
  isActive           Boolean             @default(true)
  semType            String              @default("ODD")
  maxCapacity        Int?
  currentStrength    Int                 @default(0)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  attendanceSessions AttendanceSession[]
  specialization     Specialization?     @relation(fields: [specializationId], references: [id])
  program            Program             @relation(fields: [programId], references: [id], onDelete: Cascade)
  students           Student[]
  subjects           Subject[]
  timetableEntries   TimetableEntry[]
  timetableTemplates TimetableTemplate[]

  @@unique([programId, specializationId, semester, startYear])
  @@map("batches")
}

model User {
  id                 String                 @id @default(cuid())
  email              String                 @unique
  name               String?
  phone              String?
  employeeId         String?                @unique
  role               String                 @default("STUDENT")
  departmentId       String?
  status             String                 @default("ACTIVE")
  createdAt          DateTime               @default(now())
  updatedAt          DateTime               @updatedAt
  bulkOperations     BulkOperation[]
  facultyPreferences FacultyPreferences?
  student            Student?
  coFacultySubjects  Subject[]              @relation("CoFaculty")
  primarySubjects    Subject[]              @relation("PrimaryFaculty")
  timetableEntries   TimetableEntry[]
  timetableTemplates TimetableTemplate[]    @relation("TemplateAuthors")
  createdTemplates   TimetableTemplateNew[] @relation("TemplateCreator")
  userPreferences    UserPreferences?
  department         Department?            @relation(fields: [departmentId], references: [id])

  @@map("users")
}

model Student {
  id                 String              @id @default(cuid())
  userId             String              @unique
  studentId          String              @unique
  rollNumber         String              @unique
  batchId            String
  guardianName       String?
  guardianPhone      String?
  address            String?
  dateOfBirth        DateTime?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  attendanceDisputes AttendanceDispute[]
  attendanceRecords  AttendanceRecord[]
  batch              Batch               @relation(fields: [batchId], references: [id], onDelete: Cascade)
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("students")
}

model TimeSlot {
  id                 String              @id @default(cuid())
  name               String
  startTime          String
  endTime            String
  duration           Int
  isActive           Boolean             @default(true)
  sortOrder          Int                 @default(0)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  timetableEntries   TimetableEntry[]
  timetableTemplates TimetableTemplate[]

  @@map("time_slots")
}

model Subject {
  id                 String              @id @default(cuid())
  name               String
  code               String              @unique
  credits            Int
  totalHours         Int
  batchId            String
  primaryFacultyId   String?
  coFacultyId        String?
  examType           String              @default("THEORY")
  subjectType        String              @default("CORE")
  description        String?
  isActive           Boolean             @default(true)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  attendanceSessions AttendanceSession[]
  coFaculty          User?               @relation("CoFaculty", fields: [coFacultyId], references: [id])
  primaryFaculty     User?               @relation("PrimaryFaculty", fields: [primaryFacultyId], references: [id])
  batch              Batch               @relation(fields: [batchId], references: [id], onDelete: Cascade)
  timetableEntries   TimetableEntry[]
  timetableTemplates TimetableTemplate[]

  @@map("subjects")
}

model TimetableEntry {
  id         String    @id @default(cuid())
  batchId    String
  subjectId  String
  facultyId  String
  timeSlotId String
  dayOfWeek  String
  date       DateTime?
  entryType  String    @default("REGULAR")
  isActive   Boolean   @default(true)
  notes      String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  timeSlot   TimeSlot  @relation(fields: [timeSlotId], references: [id], onDelete: Cascade)
  faculty    User      @relation(fields: [facultyId], references: [id], onDelete: Cascade)
  subject    Subject   @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  batch      Batch     @relation(fields: [batchId], references: [id], onDelete: Cascade)

  @@unique([batchId, timeSlotId, dayOfWeek, date])
  @@index([batchId])
  @@index([facultyId])
  @@index([subjectId])
  @@index([timeSlotId])
  @@index([date])
  @@index([dayOfWeek])
  @@index([batchId, date])
  @@index([facultyId, date])
  @@map("timetable_entries")
}

model AttendanceSession {
  id                String             @id @default(cuid())
  batchId           String
  subjectId         String
  date              DateTime
  isCompleted       Boolean            @default(false)
  markedBy          String?
  notes             String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  attendanceRecords AttendanceRecord[]
  subject           Subject            @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  batch             Batch              @relation(fields: [batchId], references: [id], onDelete: Cascade)

  @@unique([batchId, subjectId, date])
  @@map("attendance_sessions")
}

model AttendanceRecord {
  id             String              @id @default(cuid())
  sessionId      String
  studentId      String
  status         String              @default("ABSENT")
  reason         String?
  notes          String?
  markedAt       DateTime?
  lastModifiedBy String?
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  disputes       AttendanceDispute[]
  student        Student             @relation(fields: [studentId], references: [id], onDelete: Cascade)
  session        AttendanceSession   @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@unique([sessionId, studentId])
  @@map("attendance_records")
}

model AttendanceDispute {
  id              String           @id @default(cuid())
  recordId        String
  studentId       String
  reason          String
  requestedStatus String
  status          String           @default("PENDING")
  resolvedBy      String?
  resolvedAt      DateTime?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  student         Student          @relation(fields: [studentId], references: [id], onDelete: Cascade)
  record          AttendanceRecord @relation(fields: [recordId], references: [id], onDelete: Cascade)

  @@map("attendance_disputes")
}

model AcademicCalendar {
  id            String       @id @default(cuid())
  departmentId  String
  semesterName  String
  academicYear  String
  semesterStart DateTime
  semesterEnd   DateTime
  isActive      Boolean      @default(true)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  department    Department   @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  examPeriods   ExamPeriod[]
  holidays      Holiday[]

  @@unique([departmentId, semesterName, academicYear])
  @@index([departmentId])
  @@index([semesterStart])
  @@index([semesterEnd])
  @@index([isActive])
  @@map("academic_calendars")
}

model Holiday {
  id                 String            @id @default(cuid())
  name               String
  date               DateTime
  type               String
  departmentId       String?
  academicCalendarId String?
  isRecurring        Boolean           @default(false)
  description        String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  academicCalendar   AcademicCalendar? @relation(fields: [academicCalendarId], references: [id], onDelete: Cascade)
  department         Department?       @relation(fields: [departmentId], references: [id], onDelete: Cascade)

  @@index([date])
  @@index([type])
  @@index([departmentId])
  @@index([departmentId, date])
  @@map("holidays")
}

model ExamPeriod {
  id                  String           @id @default(cuid())
  name                String
  academicCalendarId  String
  startDate           DateTime
  endDate             DateTime
  examType            String           @default("INTERNAL")
  blockRegularClasses Boolean          @default(true)
  allowReviewClasses  Boolean          @default(true)
  description         String?
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  academicCalendar    AcademicCalendar @relation(fields: [academicCalendarId], references: [id], onDelete: Cascade)

  @@index([academicCalendarId])
  @@index([startDate])
  @@index([endDate])
  @@index([examType])
  @@index([startDate, endDate])
  @@map("exam_periods")
}

model TimetableTemplate {
  id                String    @id @default(cuid())
  name              String
  batchId           String
  subjectId         String
  facultyId         String
  timeSlotId        String
  dayOfWeek         String
  recurrencePattern String    @default("WEEKLY")
  startDate         DateTime
  endDate           DateTime?
  endCondition      String    @default("SEMESTER_END")
  totalHours        Int?
  isActive          Boolean   @default(true)
  notes             String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  timeSlot          TimeSlot  @relation(fields: [timeSlotId], references: [id], onDelete: Cascade)
  faculty           User      @relation("TemplateAuthors", fields: [facultyId], references: [id], onDelete: Cascade)
  subject           Subject   @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  batch             Batch     @relation(fields: [batchId], references: [id], onDelete: Cascade)

  @@map("timetable_templates")
}

model FacultyPreferences {
  id                   String                  @id @default(cuid())
  facultyId            String                  @unique
  preferredTimeSlots   Json?
  maxDailyHours        Int                     @default(8)
  maxWeeklyHours       Int                     @default(40)
  notificationSettings Json?
  createdAt            DateTime                @default(now())
  updatedAt            DateTime                @updatedAt
  blackoutPeriods      FacultyBlackoutPeriod[]
  faculty              User                    @relation(fields: [facultyId], references: [id], onDelete: Cascade)

  @@map("faculty_preferences")
}

model FacultyBlackoutPeriod {
  id                   String             @id @default(cuid())
  facultyPreferencesId String
  startDate            DateTime
  endDate              DateTime
  reason               String?
  isRecurring          Boolean            @default(false)
  recurrencePattern    Json?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  facultyPreferences   FacultyPreferences @relation(fields: [facultyPreferencesId], references: [id], onDelete: Cascade)

  @@map("faculty_blackout_periods")
}

model UserPreferences {
  id        String   @id @default(cuid())
  userId    String   @unique
  viewModes Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

model DepartmentSettings {
  id                   String     @id @default(cuid())
  departmentId         String     @unique
  creditHoursRatio     Int        @default(15)
  maxFacultyCredits    Int        @default(30)
  coFacultyWeight      Float      @default(0.5)
  defaultExamTypes     Json?
  defaultSubjectTypes  Json?
  customExamTypes      Json?
  customSubjectTypes   Json?
  schedulingMode       String     @default("MODULE_BASED")
  displaySettings      Json?
  defaultTimeSlots     Json?
  breakConfiguration   Json?
  moduledurations      Json?
  classTypes           Json?
  conflictRules        Json?
  autoCreateAttendance Boolean    @default(true)
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt
  department           Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)

  @@map("department_settings")
}

model BulkOperation {
  id            String         @id @default(cuid())
  type          String
  status        String         @default("PENDING")
  progress      Int            @default(0)
  startedAt     DateTime       @default(now())
  completedAt   DateTime?
  userId        String
  parameters    Json
  results       Json?
  errorLog      String?
  affectedCount Int            @default(0)
  successCount  Int            @default(0)
  failedCount   Int            @default(0)
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  logs          OperationLog[]

  @@index([userId])
  @@index([status])
  @@index([type])
  @@index([startedAt])
  @@map("bulk_operations")
}

model OperationLog {
  id          String        @id @default(cuid())
  operationId String
  level       String
  message     String
  details     Json?
  timestamp   DateTime      @default(now())
  operation   BulkOperation @relation(fields: [operationId], references: [id], onDelete: Cascade)

  @@index([operationId])
  @@index([level])
  @@index([timestamp])
  @@map("operation_logs")
}

model TimetableTemplateNew {
  id            String      @id @default(cuid())
  name          String
  description   String?
  templateData  Json
  isDefault     Boolean     @default(false)
  isPublic      Boolean     @default(false)
  departmentId  String?
  createdBy     String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  templateType  String?
  targetBatches Json?
  creditHours   Int?
  subjectCount  Int?
  timesUsed     Int         @default(0)
  lastUsed      DateTime?
  department    Department? @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  creator       User        @relation("TemplateCreator", fields: [createdBy], references: [id], onDelete: Cascade)

  @@index([createdBy])
  @@index([departmentId])
  @@index([isDefault])
  @@index([isPublic])
  @@index([templateType])
  @@map("timetable_templates_new")
}
