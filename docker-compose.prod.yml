version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: college-management-postgres-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-college_management_prod}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./backups:/var/lib/postgresql/backups
      - ./scripts/postgres-init:/docker-entrypoint-initdb.d
    networks:
      - college-management-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-college_management_prod}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # College Management Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    image: college-management:latest
    container_name: college-management-app-prod
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-college_management_dev}?sslmode=disable
      - NEXTAUTH_URL=${NEXTAUTH_URL:-http://localhost:3000}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - PORT=3000
      - HOSTNAME=0.0.0.0
    ports:
      - "${APP_PORT:-3000}:3000"
    volumes:
      - app_logs:/app/logs
      - ./uploads:/app/uploads
    networks:
      - college-management-network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Optional: Database Administration Tool
  pgadmin:
    image: dpage/pgadmin4:8
    container_name: college-management-pgadmin-prod
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@college-management.local}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    volumes:
      - pgadmin_prod_data:/var/lib/pgadmin
      - ./scripts/postgres-servers.json:/pgadmin4/servers.json:ro
    networks:
      - college-management-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    profiles:
      - admin
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  # Optional: Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: college-management-nginx-prod
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - college-management-network
    depends_on:
      - app
    restart: unless-stopped
    profiles:
      - proxy
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

volumes:
  postgres_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/postgres
  pgadmin_prod_data:
    driver: local
  app_logs:
    driver: local
  nginx_logs:
    driver: local

networks:
  college-management-network:
    driver: bridge
    name: college-management-prod

# Production deployment commands:
# Build and start: docker-compose -f docker-compose.prod.yml up --build -d
# Start with admin tools: docker-compose -f docker-compose.prod.yml --profile admin up -d
# Start with nginx: docker-compose -f docker-compose.prod.yml --profile proxy up -d
# Stop services: docker-compose -f docker-compose.prod.yml down
# View logs: docker-compose -f docker-compose.prod.yml logs -f app
# Database backup: docker-compose -f docker-compose.prod.yml exec postgres pg_dump -U postgres college_management_prod > backup.sql